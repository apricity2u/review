name: deploy service

on:
  push:
    branches:
      - main

jobs:
  ssh-agent: # Job 이름
    runs-on: ubuntu-24.04 # GitHub 워크스페이스 환경

    steps: # 실행할 작업(step)
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Discord Notification - Start
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "🐶배포 시작🐶"
          description: |
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.event.head_commit.message }}
        color: f5c518

      # 캐시 저장 설정을 위한 action(라이브러리)
      - name: Cache Docker Image Layer
        # actions/cache : 깃허브 캐시 저장소 활용을 위한 라이브러리
        uses: actions/cache@v4.2.0
        with:
          # 캐시로 관리한 경로
          path: /tmp/docker-cache
          # 불러올 캐시의 이름(식별자)
          # github.sha : 캐시의 커밋해쉬
          key: docker-image-layer-cache-${{ github.sha }}
          # 만약 캐시 key를 찾지 못하면 대체할 캐시 key 패턴
          # 커밋해쉬는 git push할 때마다 달라지기 때문에, 캐시 파일을 찾을 수가 없음.
          # 따라서 restore-keys로 가장 유사한 캐시파일을 찾아서 갱신
          restore-keys: docker-image-layer-cache

      - name: Create .env file
        run: |
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "DOMAIN=${{ secrets.DOMAIN }}" >> .env
          echo "API_URL=${{ secrets.API_URL }}" >> .env

      - name: Add Remote Server Fingerprint to Known Hosts
        run: ssh-keyscan -H -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts || true

      # 도커 BuildKit 엔진 설정 action(라이브러리)
      - name: Set up Docker BuildKit
        # 워크스페이스에 BuildKit 엔진을 설치하는 action(라이브러리)
        uses: docker/setup-buildx-action@v3

      # BuildKit 엔진 빌더(이미지 빌드를 도와주는 도구) 생성
      # 기존 Docker 빌더 - Cache 파일 저장 & 불러오기 경로 제어 불가
      - name: Create Buildkit Builder
        # 1. buildkit 빌더(buildkit)를 생성하는 명령어
        # 2. 빌더(buildkit) 설정 명령어
        # docker buildx create --use --name buildkit-builder
        run: |
          docker buildx create --use --name buildkit
          docker buildx use buildkit

      - name: Login DockerHub
        run: echo '${{ secrets.DOCKER_PASSWORD}}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

      - name: Docker Image Build
        # docker compose의 파일 이름 설정 -f 
        run: docker compose -f docker-compose.yml build --build-arg BUILDKIT_INLINE_CACHE=1

      - name: Docker Image Push
        run: docker compose -f docker-compose.yml push

      - name: Copy .env / docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose.yml,.env"
          target: "~/github-actions-work-directory"

      - name: Pull Image & Up Container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/github-actions-work-directory
            docker compose -f docker-compose.yml pull
            docker compose -f docker-compose.yml down
            docker compose -f docker-compose.yml up -d
            docker system prune -f
          # 사용하지 않는 컨테이너, 볼륨, 네트워크 등을 삭제
    
        # Discord 알림 - 배포 성공
      - name: Discord Notification - Success
        if: success()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "✅ 배포 성공"
          description: |
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.event.head_commit.message }}
          color: 0x00ff00

      # Discord 알림 - 배포 실패
      - name: Discord Notification - Failure
        if: failure()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "❌ 배포 실패"
          description: |
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.event.head_commit.message }}
          color: 0xff0000
